#include "rbt.h"
#include "dictionary.h"
#include "fileio.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

struct dictionary {
	RBT *tree;
};

static int compareWords(void *, void *);
static void loadDICT(DICT *, FILE *);

extern DICT *newDictionary(FILE *doc){
	DICT *d = malloc(sizeof(DICT));
	d->tree = newRBT(compareWords);
	if(doc) loadDICT(d, doc);
	return d;
}

extern int insertDICTword(DICT *d, void *data){
	if(insertRBT(d->tree, data)) return 1;
	return 0;
}

extern int deleteDICTword(DICT *d, void *data){
	return deleteRBT(d->tree, data);
}

extern int sizeDICT(DICT *d){
	return sizeRBT(d->tree);
}

extern void *getDICTword(DICT *d, void *data){
	return findRBT(d->tree, data);
}

static int compareWords(void *a, void *b){
	return strcmp(a, b);
}

static void loadDICT(DICT *d, FILE *doc){
	char *string = NULL; //getToken(doc);
	char ch;
	//int k = 0;

	ch = fgetc(doc);
	if(ch == EOF){
		printf("Empty file??? wtf...\n");
	       	return;
	}
	while(ch != EOF){
	//	printf("%d - count\n", k);
		if(isspace(ch)) string = getToken(doc);
		else {
			ungetc(ch, doc);
			string = getToken(doc);
		}
		if(string){
		       insertDICTword(d, string);
		 //      printf("%s\n", string);
		}
		string = NULL;
		ch = fgetc(doc);
		ch = fgetc(doc);
		k++;
	}
}
